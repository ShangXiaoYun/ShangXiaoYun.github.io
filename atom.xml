<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shangxiaoyun.github.io</id>
    <title>晓云的个人博客</title>
    <updated>2022-07-23T08:00:02.742Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shangxiaoyun.github.io"/>
    <link rel="self" href="https://shangxiaoyun.github.io/atom.xml"/>
    <subtitle>一点记录</subtitle>
    <logo>https://shangxiaoyun.github.io/images/avatar.png</logo>
    <icon>https://shangxiaoyun.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 晓云的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[主页]]></title>
        <id>https://shangxiaoyun.github.io/post/zhu-ye/</id>
        <link href="https://shangxiaoyun.github.io/post/zhu-ye/">
        </link>
        <updated>2022-07-23T07:56:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="通过接口获取菜单数据"><strong>通过接口获取菜单数据</strong></h2>
<ul>
<li>
<p>API接口文档中提到：</p>
<ul>
<li>除了登录接口，其余的接口必须要授权才能调用</li>
<li>因此，需要授权的API，必须在请求头中使用Authorization字段提供token令牌</li>
</ul>
</li>
<li>
<p>如何在每一个API的请求头中添加Authorization字段？</p>
<ul>
<li>通过axios请求拦截器添加token，保证拥有获取数据的权限。</li>
<li>请求之前会先做一个预处理，返回config（为请求头对象挂载一个属性，值为保存在sessionStorage中的token值）</li>
</ul>
</li>
</ul>
<pre><code class="language-jsx">//axios请求拦截
axios.interceptors.request.use(config =&gt; {
  //为请求头对象，添加Token 验证的Authorization字段
  console.log(config)
  config.headers.Authorization = window.sessionStorage.getItem('token')
  //在最后必须返回预处理结果
  return config
})
</code></pre>
<h2 id="发起请求获取左侧菜单数据"><strong>发起请求获取左侧菜单数据</strong></h2>
<ul>
<li>在Home页面被创建时，就应该获取菜单数据并附到左侧菜单框，因此created()生命钩子中调用this.getMenuList()</li>
<li>模板区通过指令v-for循环赋值，每个v-for循环需要一个唯一的key值，通常用id</li>
<li>el-submenu也需要唯一的一个index，否则相同的index会在一次展开时同时展开。通常也用index。注意此处index只接收字符串。</li>
<li>一级菜单的index由item.id动态绑定，key也由item.id动态绑定，不同的是，前者需要拼接‘ ’来转换成字符串。</li>
<li>二级菜单循环一级菜单的children属性，<strong>二级菜单的index由路由路径动态绑定</strong>，key仍然由item.id动态绑定。</li>
</ul>
<h2 id="实现首页的路由重定向"><strong>实现首页的路由重定向</strong></h2>
<p>只要登录成功，我们默认访问/home，但是此时我们需要重定向到welcome地址，在主体区域展示Welcome组件。首先定义一个Welcome组件，然后在home页面主体区域放置一个路由占位符。然后将welcome路由设置为home理由的子路由规则，即可在home组件嵌套显示一个welcome的子组件。</p>
<h2 id="左侧菜单改造为路由链接"><strong>左侧菜单改造为路由链接</strong></h2>
<p>点击二级菜单时，跳转到对应的页面，因此二级菜单绑定单击响应事件。</p>
<p>element-ui的NavMenu的属性中，有一项router，描述为：</p>
<p>是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转，类型为布尔值，默认为false。 :router=&quot;true&quot;表示为整个侧边栏开启路由模式。拿id作为跳转地址并不是很合适，最好是拿二级菜单的path属性作为跳转路径。</p>
<h2 id="高亮效果"><strong>高亮效果</strong></h2>
<p>NavMenu中的属性default-active说明：当前激活菜单的 index，类型为string。</p>
<p>点击链接的时候把对应的path值（index）保存到sessionStorage中<br>
当下一次刷新页面的时候，也就是home组件刚被创建的时候，就立即把值取出来，赋值给左侧菜单<br>
给二级菜单绑定一个单击响应事件: 保存链接的激活状态</p>
<pre><code class="language-jsx">saveNavState(activePath) {
	window.sessionStorage.setItem('activePath', activePath)
	this.activePath = activePath
}
</code></pre>
<pre><code class="language-jsx">created() {
    this.getMenuList()
    this.activePath = window.sessionStorage.getItem('activePath')
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[登录/退出功能]]></title>
        <id>https://shangxiaoyun.github.io/post/deng-lu-tui-chu-gong-neng/</id>
        <link href="https://shangxiaoyun.github.io/post/deng-lu-tui-chu-gong-neng/">
        </link>
        <updated>2022-07-23T07:03:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="登录业务流程">登录业务流程</h1>
<p>登录业务流程</p>
<p>1.在登录页面输入用户名和密码</p>
<p>2.调用后台接口进行验证</p>
<p>3.通过验证后，根据后台的响应状态跳转到项目主页</p>
<h1 id="登录业务的相关技术点">登录业务的相关技术点</h1>
<ul>
<li>
<p>登录业务的相关技术点</p>
<ul>
<li>http是无状态的</li>
<li>通过cookie在客户端记录状态</li>
<li>通过session在服务器端记录状态</li>
<li>通过token方式维持状态</li>
</ul>
<p><strong>如果客户端和服务器存在跨域问题：token</strong></p>
<p><strong>如果客户端和服务器不存在跨域问题：cookie+session</strong></p>
</li>
<li>
<p>登录——token原理</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://shangxiaoyun.github.io/post-images/1658562040637.png" alt="" loading="lazy"></figure>
<h2 id="登录表单">登录表单</h2>
<ul>
<li>登录表单绑定数据对象，里面的内容和输入双向绑定（:model  v-model）</li>
<li>增加表单验证规则(:rules prop)</li>
<li>表单添加ref属性，通过this.$refs拿到表单引用，调用重置和登陆验证函数(resetFields()  validate())</li>
<li>验证成功→配置axios和请求根路径，发起ajax请求  (this.$http)</li>
<li>post结果是一个promise，用async await优化</li>
</ul>
<h2 id="登录成功以后">登录成功以后</h2>
<ul>
<li>1.将登陆成功之后的token保存到客户端的sessionStoreage中
<ul>
<li>1.1 项目中除了登陆以外的其他api接口（有权限的接口） ，必须在登陆以后才能访问</li>
<li>1.2 token只应在当前网站打开期间生效，所以将token保存到<strong>sessionStoreage</strong>（会话期间存储机制，区别于localStoreage持久化的存储机制）中</li>
</ul>
</li>
</ul>
<pre><code class="language-jsx">window.sessionStorage.setItem('token', res.data.token)
</code></pre>
<ul>
<li>2. 通过<strong>编程式导航</strong>跳转到后台主页，路由地址是/home</li>
</ul>
<pre><code class="language-jsx">this.$router.push(&quot;/home&quot;);
</code></pre>
<h3 id="用路由导航守卫控制导航权限">用路由导航守卫控制导航权限</h3>
<p>如果用户没有登录，但通过url访问特定页面，需要重新导航到登录页面</p>
<pre><code class="language-jsx">//挂载路由导航守卫
router.beforeEach((to, from, next) =&gt; {
  //to 将要访问的路径
  //from 代表从哪个路径跳转而来
  //next 是一个函数，表示放行
  // next()  放行    next('/login)    强制跳转

  if (to.path === '/login') return next();
  //获取token
  const tokenStr = window.sessionStorage.getItem('token');
  if (!tokenStr) return next('/login');
  next();
})
</code></pre>
<h2 id="退出"><strong>退出</strong></h2>
<p>消除本地token</p>
<pre><code class="language-jsx">window.sessionStorage.clear()
</code></pre>
]]></content>
    </entry>
</feed>