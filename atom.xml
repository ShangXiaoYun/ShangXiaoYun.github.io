<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shangxiaoyun.github.io</id>
    <title>晓云的个人博客</title>
    <updated>2022-07-23T19:03:05.624Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shangxiaoyun.github.io"/>
    <link rel="self" href="https://shangxiaoyun.github.io/atom.xml"/>
    <subtitle>一点记录</subtitle>
    <logo>https://shangxiaoyun.github.io/images/avatar.png</logo>
    <icon>https://shangxiaoyun.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 晓云的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[项目优化&上线]]></title>
        <id>https://shangxiaoyun.github.io/post/xiang-mu-you-hua-andshang-xian/</id>
        <link href="https://shangxiaoyun.github.io/post/xiang-mu-you-hua-andshang-xian/">
        </link>
        <updated>2022-07-23T18:59:56.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="项目优化策略"><strong>项目优化策略</strong></h2>
<p>可以从以下几个方向优化：</p>
<p>生成打包报告、第三方库启用CDN、Element-UI 组件按需加载、路由懒加载、图片压缩、图片懒加载、Gzip 压缩、首页内容定制等。</p>
<h3 id="生成打包报告"><strong>生成打包报告</strong></h3>
<p>便于直观发现项目存在的问题，由于项目使用 vue-cli2 ，此处通过可视化面板（vue ui）查看报告。</p>
<h3 id="通过externals加载外部cdn资源"><strong>通过externals加载外部CDN资源</strong></h3>
<p>默认情况下，通过 import 语法导入的第三方依赖包，最终会被打包合并在同一个文件中，从而导致打包成功后，单文件体积过大的问题。为了解决该问题，可以通过 webpack 的 externals 节点，来配置并加载外部的 CDN 资源。凡是声明在 externals 中的第三方依赖包，都不会被打包。</p>
<p>css开源库：<a href="https://cdnjs.com/">cdnjs - The #1 free and open source CDN built to make life easier for developers</a></p>
<p>js开源库：<a href="https://www.jsdelivr.com/">jsDelivr - A free, fast, and reliable CDN for open source</a></p>
<p>首先，在 webpack.prod.conf.js 中的添加代码段：</p>
<pre><code>externals: {
    'vue': 'Vue',
    // 'vue-router': 'VueRouter',
    'axios': 'axios',
    'vue-lazyload':'VueLazyload',
    lodash:'_',
    echarts:'echarts',
    nprogress:'NProgress',
    'vue-quill-editor':'VueQuillEditor',
    'element-ui': 'ELEMENT'
}
</code></pre>
<p>然后在 index.html 中引入相关资源，资源版本参照 package.json 中的版本。</p>
<pre><code class="language-html"> &lt;!-- 富文本编辑器样式表 --&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.core.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.snow.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.bubble.css&quot;&gt;
    &lt;!-- nprogress 进度条样式 --&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.6/theme-chalk/index.min.css&quot;&gt;
    &lt;!-- element-ui 样式表 --&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.6/theme-chalk/index.min.css&quot;&gt;

    &lt;!-- js 文件 --&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.2/dist/vue.min.js&quot;&gt;&lt;/script&gt;
    &lt;!-- &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.5.2/vue-router.min.js&quot;&gt;&lt;/script&gt; --&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios@0.24.0/dist/axios.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue-lazyload@1.3.3/vue-lazyload.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.0/echarts.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.6/index.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.6/dist/vue-quill-editor.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>main.js 中要注释 element-ui 的导入和使用，注释富文本编辑器和进度条的样式导入。</p>
<p>打包后 vender.js 文件体积显著减小。</p>
<h3 id="路由懒加载"><strong>路由懒加载</strong></h3>
<p>当打包构建项目时，JS包会变得很大，影响页面加载。因此把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，更加高效。其中，webpackChunkName  可以把不同的路由打包到一个 js 文件中，相当于路由分组。</p>
<pre><code class="language-js">const Login = () =&gt; import(/*webpackChunckName:&quot;Login_Home_Welcome&quot;*/'../components/Login.vue')
const Home = () =&gt; import(/*webpackChunckName:&quot;Login_Home_Welcome&quot;*/'../components/Home.vue')
const Welcome = () =&gt; import(/*webpackChunckName:&quot;Login_Home_Welcome&quot;*/'../components/Welcome.vue')
</code></pre>
<p>打包后，会形成多个 js 文件。</p>
<h3 id="图片压缩"><strong>图片压缩</strong></h3>
<p>使用 webpack 打包工具一定少不了一些好用的转换器（loaders）。其中，用于压缩图片的 loader 叫 image-webpack-loader。</p>
<p>在 webpack.base.conf.js 中设置：</p>
<pre><code class="language-js">{
    test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
    use:[
        //图片压缩
        {
            loader: 'image-webpack-loader',
            options: {
                disable: process.env.NODE_ENV === 'development', // 开发环境下禁止压缩
                bypassOnDebug: true,
                gifsicle: {
                    interlaced: false
                }
            }
        }
    ]
}
</code></pre>
<p>但是测试后上述设置对动态图片gif无效。</p>
<h3 id="图片懒加载"><strong>图片懒加载</strong></h3>
<ul>
<li>
<p>图片延迟加载也称为懒加载，延迟加载图片或符合某些条件时才加载某些图片，通常适用于图片较多的网页，可以减少请求数或延迟请求数，优化性能。它有三种常见的呈现方式：</p>
<ul>
<li>
<p>延迟加载：使用 setTimeout 或 setInterval 进行延迟加载，如果用户在加载前就离开，自然不会进行加载。</p>
</li>
<li>
<p>条件加载：符合某些条件或者触发某些条件才开始异步加载。</p>
</li>
<li>
<p>可视域加载：仅仅加载用户可以看到的区域，主要通过监控滚动条来实现，一般距离用户看到的底边很近的时候加载，这样能保证用户下拉时正好接上，不会有太长时间的停顿。</p>
<ul>
<li>
<p>判断条件：图片距顶部的距离 &lt; 滚动条顶部的距离 + 可视域区域高度</p>
<ul>
<li>
<pre><code class="language-js">var clientHeight = document.documentElement.clientHeight;//  可视域区域高度	
var scrollTop = document.documentElement.scrollTop;  // 滚动条 top 值
imgTop = imgArr[i].offsetTop;
/*...*/
if(imgTop &lt; scrollTop + clientHeight){
    var src = imgArr[i].getAttribute(&quot;data-src&quot;);
	imgArr[i].setAttribute(&quot;src&quot;, src);   
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>判断时机：滚动的时候加载   window.onscroll</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>上述方法，在滚动条上下滚动时，懒加载函数会被频繁调用，造成很大的性能损失，因此需要给事件加上节流 throttle。</p>
<ul>
<li>
<pre><code class="language-js">function lazyload(fn, immediate) {
    let flag = true;
    return function (...args) {
        let context = this;
        if (!flag) return;
        flag = false;
        setTimeout(() =&gt; {
            fn.apply(context, args)
            flag = true;
        }, 200)
    }
}
</code></pre>
</li>
</ul>
</li>
</ul>
<p>参考博客：<a href="https://blog.csdn.net/darabiuz/article/details/123151266">(18条消息) 图片懒加载的原理--三种方法实现_望屿的博客-CSDN博客_图片懒加载</a></p>
<h3 id="gzip-压缩"><strong>Gzip 压缩</strong></h3>
<p>Gzip 压缩使用到 CompressionWebpackPlugin 插件（文本资源压缩插件）。</p>
<pre><code class="language-js">if (config.build.productionGzip) {
  const CompressionWebpackPlugin = require('compression-webpack-plugin')
  webpackConfig.plugins.push(
    new CompressionWebpackPlugin({
      asset: '[path].gz[query]',   // 会被替换的原始资源
      algorithm: 'gzip',
      //所有匹配该正则的资源都会被处理。默认值是全部资源。
      test: new RegExp(
        '\\.(' +
        config.build.productionGzipExtensions.join('|') +
        ')$'
      ),
      threshold: 10240, //只有大小大于该值的资源会被处理。单位是 bytes。默认值是 0。
      minRatio: 0.8  //只有压缩率小于这个值的资源才会被处理。默认值是 0.8。
    })
  )
}
</code></pre>
<h3 id="压缩代码"><strong>压缩代码</strong></h3>
<p>ExtractTextPlugin  用于将 css , less 打包成一个公共的文件的插件，这个公共的文件是 styles.css。OptimizeCssAssetsWebpackPlugin  压缩输出的 css 文件。UglifyJSPlugin 插件压缩代码（丑化后已无法阅读）。</p>
<pre><code class="language-js">new ExtractTextPlugin({
    filename: utils.assetsPath('css/[name].[contenthash].css'),
    allChunks: true
}),
new OptimizeCSSPlugin({
    cssProcessorOptions: config.build.productionSourceMap ? {safe: true, map: {inline: false}}: {safe: true}
}),
new UglifyJsPlugin({
    uglifyOptions: {
        compress: {
        	warnings: false
        }
    },
    sourceMap: config.build.productionSourceMap,
    parallel: true
})
</code></pre>
<p>OptimizeCssAssetsWebpackPlugin  还可以参考：<a href="https://blog.csdn.net/u012961419/article/details/107094111">(18条消息) webpack二刷之五、生产环境优化（5.提取压缩CSS）_皮蛋很白的博客-CSDN博客_optimization.minimizer</a></p>
<h3 id="上述打包结果"><strong>上述打包结果</strong></h3>
<figure data-type="image" tabindex="1"><img src="https://shangxiaoyun.github.io/post-images/1658602865860.png" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<h2 id="项目优化策略"><strong>项目优化策略</strong></h2>
<p>可以从以下几个方向优化：</p>
<p>生成打包报告、第三方库启用CDN、Element-UI 组件按需加载、路由懒加载、图片压缩、图片懒加载、Gzip 压缩、首页内容定制等。</p>
<h3 id="生成打包报告"><strong>生成打包报告</strong></h3>
<p>便于直观发现项目存在的问题，由于项目使用 vue-cli2 ，此处通过可视化面板（vue ui）查看报告。</p>
<h3 id="通过externals加载外部cdn资源"><strong>通过externals加载外部CDN资源</strong></h3>
<p>默认情况下，通过 import 语法导入的第三方依赖包，最终会被打包合并在同一个文件中，从而导致打包成功后，单文件体积过大的问题。为了解决该问题，可以通过 webpack 的 externals 节点，来配置并加载外部的 CDN 资源。凡是声明在 externals 中的第三方依赖包，都不会被打包。</p>
<p>css开源库：<a href="https://cdnjs.com/">cdnjs - The #1 free and open source CDN built to make life easier for developers</a></p>
<p>js开源库：<a href="https://www.jsdelivr.com/">jsDelivr - A free, fast, and reliable CDN for open source</a></p>
<p>首先，在 webpack.prod.conf.js 中的添加代码段：</p>
<pre><code>externals: {
    'vue': 'Vue',
    // 'vue-router': 'VueRouter',
    'axios': 'axios',
    'vue-lazyload':'VueLazyload',
    lodash:'_',
    echarts:'echarts',
    nprogress:'NProgress',
    'vue-quill-editor':'VueQuillEditor',
    'element-ui': 'ELEMENT'
}
</code></pre>
<p>然后在 index.html 中引入相关资源，资源版本参照 package.json 中的版本。</p>
<pre><code class="language-html"> &lt;!-- 富文本编辑器样式表 --&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.core.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.snow.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.bubble.css&quot;&gt;
    &lt;!-- nprogress 进度条样式 --&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.6/theme-chalk/index.min.css&quot;&gt;
    &lt;!-- element-ui 样式表 --&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.6/theme-chalk/index.min.css&quot;&gt;

    &lt;!-- js 文件 --&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.2/dist/vue.min.js&quot;&gt;&lt;/script&gt;
    &lt;!-- &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.5.2/vue-router.min.js&quot;&gt;&lt;/script&gt; --&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios@0.24.0/dist/axios.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue-lazyload@1.3.3/vue-lazyload.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.0/echarts.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.6/index.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.6/dist/vue-quill-editor.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>main.js 中要注释 element-ui 的导入和使用，注释富文本编辑器和进度条的样式导入。</p>
<p>打包后 vender.js 文件体积显著减小。</p>
<h3 id="路由懒加载"><strong>路由懒加载</strong></h3>
<p>当打包构建项目时，JS包会变得很大，影响页面加载。因此把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，更加高效。其中，webpackChunkName  可以把不同的路由打包到一个 js 文件中，相当于路由分组。</p>
<pre><code class="language-js">const Login = () =&gt; import(/*webpackChunckName:&quot;Login_Home_Welcome&quot;*/'../components/Login.vue')
const Home = () =&gt; import(/*webpackChunckName:&quot;Login_Home_Welcome&quot;*/'../components/Home.vue')
const Welcome = () =&gt; import(/*webpackChunckName:&quot;Login_Home_Welcome&quot;*/'../components/Welcome.vue')
</code></pre>
<p>打包后，会形成多个 js 文件。</p>
<h3 id="图片压缩"><strong>图片压缩</strong></h3>
<p>使用 webpack 打包工具一定少不了一些好用的转换器（loaders）。其中，用于压缩图片的 loader 叫 image-webpack-loader。</p>
<p>在 webpack.base.conf.js 中设置：</p>
<pre><code class="language-js">{
    test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
    use:[
        //图片压缩
        {
            loader: 'image-webpack-loader',
            options: {
                disable: process.env.NODE_ENV === 'development', // 开发环境下禁止压缩
                bypassOnDebug: true,
                gifsicle: {
                    interlaced: false
                }
            }
        }
    ]
}
</code></pre>
<p>但是测试后上述设置对动态图片gif无效。</p>
<h3 id="图片懒加载"><strong>图片懒加载</strong></h3>
<ul>
<li>
<p>图片延迟加载也称为懒加载，延迟加载图片或符合某些条件时才加载某些图片，通常适用于图片较多的网页，可以减少请求数或延迟请求数，优化性能。它有三种常见的呈现方式：</p>
<ul>
<li>
<p>延迟加载：使用 setTimeout 或 setInterval 进行延迟加载，如果用户在加载前就离开，自然不会进行加载。</p>
</li>
<li>
<p>条件加载：符合某些条件或者触发某些条件才开始异步加载。</p>
</li>
<li>
<p>可视域加载：仅仅加载用户可以看到的区域，主要通过监控滚动条来实现，一般距离用户看到的底边很近的时候加载，这样能保证用户下拉时正好接上，不会有太长时间的停顿。</p>
<ul>
<li>
<p>判断条件：图片距顶部的距离 &lt; 滚动条顶部的距离 + 可视域区域高度</p>
<ul>
<li>
<pre><code class="language-js">var clientHeight = document.documentElement.clientHeight;//  可视域区域高度	
var scrollTop = document.documentElement.scrollTop;  // 滚动条 top 值
imgTop = imgArr[i].offsetTop;
/*...*/
if(imgTop &lt; scrollTop + clientHeight){
    var src = imgArr[i].getAttribute(&quot;data-src&quot;);
	imgArr[i].setAttribute(&quot;src&quot;, src);   
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>判断时机：滚动的时候加载   window.onscroll</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>上述方法，在滚动条上下滚动时，懒加载函数会被频繁调用，造成很大的性能损失，因此需要给事件加上节流 throttle。</p>
<ul>
<li>
<pre><code class="language-js">function lazyload(fn, immediate) {
    let flag = true;
    return function (...args) {
        let context = this;
        if (!flag) return;
        flag = false;
        setTimeout(() =&gt; {
            fn.apply(context, args)
            flag = true;
        }, 200)
    }
}
</code></pre>
</li>
</ul>
</li>
</ul>
<p>参考博客：<a href="https://blog.csdn.net/darabiuz/article/details/123151266">(18条消息) 图片懒加载的原理--三种方法实现_望屿的博客-CSDN博客_图片懒加载</a></p>
<h3 id="gzip-压缩"><strong>Gzip 压缩</strong></h3>
<p>Gzip 压缩使用到 CompressionWebpackPlugin 插件（文本资源压缩插件）。</p>
<pre><code class="language-js">if (config.build.productionGzip) {
  const CompressionWebpackPlugin = require('compression-webpack-plugin')
  webpackConfig.plugins.push(
    new CompressionWebpackPlugin({
      asset: '[path].gz[query]',   // 会被替换的原始资源
      algorithm: 'gzip',
      //所有匹配该正则的资源都会被处理。默认值是全部资源。
      test: new RegExp(
        '\\.(' +
        config.build.productionGzipExtensions.join('|') +
        ')$'
      ),
      threshold: 10240, //只有大小大于该值的资源会被处理。单位是 bytes。默认值是 0。
      minRatio: 0.8  //只有压缩率小于这个值的资源才会被处理。默认值是 0.8。
    })
  )
}
</code></pre>
<h3 id="压缩代码"><strong>压缩代码</strong></h3>
<p>ExtractTextPlugin  用于将 css , less 打包成一个公共的文件的插件，这个公共的文件是 styles.css。OptimizeCssAssetsWebpackPlugin  压缩输出的 css 文件。UglifyJSPlugin 插件压缩代码（丑化后已无法阅读）。</p>
<pre><code class="language-js">new ExtractTextPlugin({
    filename: utils.assetsPath('css/[name].[contenthash].css'),
    allChunks: true
}),
new OptimizeCSSPlugin({
    cssProcessorOptions: config.build.productionSourceMap ? {safe: true, map: {inline: false}}: {safe: true}
}),
new UglifyJsPlugin({
    uglifyOptions: {
        compress: {
        	warnings: false
        }
    },
    sourceMap: config.build.productionSourceMap,
    parallel: true
})
</code></pre>
<p>OptimizeCssAssetsWebpackPlugin  还可以参考：<a href="https://blog.csdn.net/u012961419/article/details/107094111">(18条消息) webpack二刷之五、生产环境优化（5.提取压缩CSS）_皮蛋很白的博客-CSDN博客_optimization.minimizer</a></p>
<h3 id="上述打包结果"><strong>上述打包结果</strong></h3>
<figure data-type="image" tabindex="1"><img src="https://shangxiaoyun.github.io/post-images/1658602865860.png" alt="" loading="lazy"></figure>
<!-- more -->
<p>vendor.js 第三方库组件打包文件体积明显减小。jpg 图片压缩成功，但 gif 动态图没有压缩。（问题遗留）</p>
<h2 id="项目上线"><strong>项目上线</strong></h2>
<ol>
<li>
<p>初始化package.json     <code>npm init -y</code></p>
</li>
<li>
<p>安装依赖项  <code>cnpm install express -S</code></p>
</li>
<li>
<p>将 vue_shop 中打包生成的 dist 目录，复制到 vue_shop_server 文件夹中</p>
</li>
<li>
<p>新建app.js 入口文件。</p>
<pre><code class="language-js">const express = require('express')

// 创建 web 服务器
const app = express()

// 托管静态资源
app.use(express.static('./dist'))

// 启动 web 服务器
app.listen(80, () =&gt; {
  console.log('web server running at http://127.0.0.1');
})
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[事件的防抖和节流]]></title>
        <id>https://shangxiaoyun.github.io/post/shi-jian-de-fang-dou-he-jie-liu/</id>
        <link href="https://shangxiaoyun.github.io/post/shi-jian-de-fang-dou-he-jie-liu/">
        </link>
        <updated>2022-07-23T17:25:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="节流"><strong>节流</strong></h2>
<p>节流的核心思想: 如果在定时器的时间范围内再次触发，则不予理睬，等当前定时器完成，才能启动<strong>下一个定时器任务</strong>。这就好比公交车，10 分钟一趟，无论车上乘客多少，到点才发车。<strong>节流可以连续触发</strong>。</p>
<p>代码如下:</p>
<pre><code>function throttle(fn, interval) {
  let flag = true;
  return funtion(...args) {
    let context = this;
    if (!flag) return;
    flag = false;
    setTimeout(() =&gt; {
      fn.apply(context, args);
      flag = true;
    }, interval);
  };
};
</code></pre>
<p>写成下面的方式也是表达一样的意思:</p>
<pre><code>const throttle = function(fn, interval) {
  let last = 0;
  return function (...args) {
    let context = this;
    let now = +new Date();
    // 还没到时间
    if(now - last &lt; interval) return;
    last = now;
    fn.apply(this, args)
  }
}
</code></pre>
<h2 id="防抖"><strong>防抖</strong></h2>
<p>核心思想: 每次事件触发则删除原来的定时器，建立新的定时器。你反复触发功能，那么只认最后一次，从最后一次触发开始计时。</p>
<pre><code>function debounce(fn, delay) {
  let timer = null;
  return function (...args) {
    let context = this;
    if(timer) clearTimeout(timer);
    timer = setTimeout(function() {
      fn.apply(context, args);
    }, delay);
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[订单管理&数据统计]]></title>
        <id>https://shangxiaoyun.github.io/post/ding-dan-guan-li-andshu-ju-tong-ji/</id>
        <link href="https://shangxiaoyun.github.io/post/ding-dan-guan-li-andshu-ju-tong-ji/">
        </link>
        <updated>2022-07-23T10:00:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="订单列表可视化"><strong>订单列表可视化</strong></h3>
<ul>
<li>
<p>搜索框：由于后台没有做模糊匹配，因此前端来完成。</p>
<pre><code class="language-jsx">this.orderlist = this.orderAll.filter(item =&gt; {
  return item.order_number.match(info)
})
</code></pre>
</li>
<li>
<p>修改地址对话框的省市区/县的级联选择器：将数据由外部 city_data2017_element.js 导入。</p>
</li>
<li>
<p>展开订单详情，由于goods_origin_price 、goodsPic 和  goodsName 是异步请求获得，因此可视化时 goodslist 中并没这些属性，这里使用深拷贝，将处理后、拥有上述属性的arr 对 goodslist 重新赋值。</p>
<pre><code class="language-jsx">let goods_price_sum ,goods_origin_price = 0
let goodsName ,goodsPic= ''
let arr = _.cloneDeep(this.goodslist)
arr.forEach(async item =&gt; {
    goods_price_sum = item.goods_number * item.goods_price
    Object.assign(item,{goods_price_sum:goods_price_sum})
    const {data:res} = await this.$http.get(`goods/${item.goods_id}`)
    if(res.meta.status !== 200) return this.$message.error('获取商品信息失败！')
    goodsName = res.data.goods_name 
    Object.assign(item,{goodsName:goodsName})
    goods_origin_price = res.data.goods_price
    Object.assign(item,{goods_origin_price:goods_origin_price})
    goodsPic = res.data.pics[0].pics_sma_url
    Object.assign(item,{goodsPic:goodsPic})
}) 

setTimeout(() =&gt; {
    this.goodslist = arr;
    console.log(this.goodslist);
},500)
</code></pre>
</li>
</ul>
<h3 id="数据统计"><strong>数据统计</strong></h3>
<ul>
<li>echarts 使用
<ul>
<li>导入 echarts</li>
<li>为 echarts准备一个具备大小（宽高）的 DOM</li>
<li>在 mounted() 生命函数中，基于准备好的 DOM ，初始化 echarts 实例</li>
<li>准备数据和配置项</li>
<li>展示数据</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[商品管理]]></title>
        <id>https://shangxiaoyun.github.io/post/shang-pin-guan-li/</id>
        <link href="https://shangxiaoyun.github.io/post/shang-pin-guan-li/">
        </link>
        <updated>2022-07-23T09:48:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="商品列表"><strong>商品列表</strong></h2>
<ul>
<li>
<p>添加商品。其中在商品基本信息有下拉商品分类菜单，因此还是需要调用 this.getCateList() 函数。</p>
<ul>
<li>
<p>使用编程式导航跳转到新的页面   <code>this.$router.push(’/goods/add’)</code></p>
</li>
<li>
<p><strong>富文本编辑器   vue-quill-editor</strong></p>
</li>
<li>
<p>上传图片这里由于没有使用 axios 发起 ajax 请求，因此及时显示图片，也是无效的，这是因为 token 无效。在上传每一张图片时，手动为它指定一个 headers 请求头，在请求头中包含一个字段属性 Authorization，保存 token 值，即为其提供 token 验证。</p>
<pre><code class="language-jsx">headerObj: {
  Authorization: window.sessionStorage.getItem('token')
}
</code></pre>
</li>
<li>
<p>这里一个问题是 预览不了图片。handlePreview() 预处理函数中处理 previewPath ，把本地图片地址换成后台图片地址。</p>
<pre><code class="language-jsx">this.previewPath = file.response.data.url.replace(
	'http://120.78.137.246', 'https://lianghj.top'
)
</code></pre>
</li>
<li>
<p>添加商品时 goods_cat 商品分类需要以字符串的形式上传，而在级联选择器中是以数组的形式存在，因此需要用 join() 函数，但是不能在 this.addForm 上直接修改。因此采用<strong>深拷贝 cloneDeep。</strong></p>
<pre><code class="language-js">import _ from 'lodash'
const form = _.cloneDeep(this.addForm) //全新的对象
form.goods_cat = form.goods_cat.join(',')
</code></pre>
</li>
</ul>
</li>
<li>
<p>编辑商品信息</p>
<ul>
<li>商品分类通过下拉菜单选择，但是看不见原始分类，因此考虑用 Tag 标签可视化出来（这里后端接口有一个错误：如果只设置到二级分类，那么三级分类会被上一次的三级分类代替），因此我们规定所有商品都有三级分类，添加商品时设置。</li>
<li>由于下拉菜单中是商品全部分类，因此要调用 this.getCateList() 函数，这个函数在多个组件中都是用了，我们考虑用 Vuex 进行管理 （可改进）</li>
<li>尝试把根据 id 获取商品信息和商品分类提出来，但是都出错了，主要是异步请求的问题。</li>
</ul>
</li>
</ul>
<h2 id="商品分类"><strong>商品分类</strong></h2>
<p>主要显示和编辑商品分类。这里也使用到 this.getCateList() 函数。</p>
<ul>
<li>显示使用树形表格，columns 是表格各列的配置。type 为 template 时，对应的是作用域插槽。</li>
</ul>
<h2 id="分类参数"><strong>分类参数</strong></h2>
<p>主要对不同的商品分类添加静态属性和动态属性。选择商品分类中级联选择框中又是全部商品分类，需要调用 this.getCateList() 函数。甚至下拉菜单选择框和面包屑导航相似，在多个组件中使用，可以一起导出使用。</p>
<ul>
<li>
<p>添加动态参数/静态属性的对话框共用一个，通过 activeName （many/only）判断具体是哪一个，使用计算属性来判断。</p>
</li>
<li>
<p>当点击 tag 时，标签变为输入框，且输入框获得焦点。这是需要使用 <code>$nextTick</code> ，它的作用是当页面上的元素被重新渲染之后，才会执行回调函数，这样在回调函数中才能拿到原生 DOM 对象。</p>
<pre><code class="language-jsx">this.$nextTick(_ =&gt; {
  this.$refs.saveTagInput.$refs.input.focus()
})
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[权限列表]]></title>
        <id>https://shangxiaoyun.github.io/post/quan-xian-lie-biao/</id>
        <link href="https://shangxiaoyun.github.io/post/quan-xian-lie-biao/">
        </link>
        <updated>2022-07-23T09:06:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="权限管理"><strong>权限管理</strong></h2>
<p>权限管理业务分析：</p>
<p>通过权限管理模块控制不同的用户可以进行哪些操作，具体可以通过角色的方式进行控制，即每个用户分配特定的角色，角色包括不同的功能权限。</p>
<figure data-type="image" tabindex="1"><img src="https://shangxiaoyun.github.io/post-images/1658567200989.png" alt="" loading="lazy"></figure>
<h2 id="角色列表"><strong>角色列表</strong></h2>
<p><strong>难点1</strong>：使用 v-for 循环渲染角色的权限（作用域插槽）</p>
<p><strong>难点2</strong>：每次删除一个权限时，将返回的 data 赋值给 role.children ，这里的 role 是 scope.row。而不应该重新执行 getRoleList() 函数，否则列表就会重新刷新渲染一次。展开栏也会合上。<br>
<img src="https://shangxiaoyun.github.io/post-images/1658567222052.png" alt="" loading="lazy"></p>
<p><strong>难点3</strong>：改进，当某个二级菜单下已经没有三级菜单时，对应的二级菜单也删除。当某个一级菜单下已经没有二级菜单时，一级菜单也随之删除。</p>
<p><strong>难点4</strong>：tree结构</p>
<ul>
<li>递归获取三级节点的 id 放到 defKeys 数组中，通过 Tree 组件的 :default-checked-keys 属性来表示选中的项。</li>
<li>通过 Tree 组件 ref 对象的 getCheckedKeys() 和 getHalfCheckedKeys() 方法得到全选和半选中的id数组，最后通过 join() 拼接，得到的信息作为一项参数发送分配权限请求。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用户列表]]></title>
        <id>https://shangxiaoyun.github.io/post/yong-hu-lie-biao/</id>
        <link href="https://shangxiaoyun.github.io/post/yong-hu-lie-biao/">
        </link>
        <updated>2022-07-23T08:53:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="插槽形式的自定义列的渲染"><strong>插槽形式的自定义列的渲染</strong></h3>
<p>操作列包含修改、删除、分配角色三个功能。这些操作都需要获取当前用户id，因此需要使用作用域插槽获取当前行的内容（scope.row）。</p>
<h3 id="添加用户对话框中渲染一个表单"><strong>添加用户对话框中渲染一个表单</strong></h3>
<ul>
<li>在 Form 组件中，每一个表单域由一个 Form-Item 组件构成，表单域中可以放置各种类型的表单控件，包括 Input、Select、Checkbox、Radio、Switch、DatePicker、TimePicker。</li>
<li>:model数据绑定，要将数据绑定到一张表单addForm，:rules绑定表单的验证规则，添加表单的验证规则对象addFormRules{}，ref给el-form组件起了一个引用名称：addFormRef。</li>
<li>el-form中prop对应验证规则的属性。Form 组件提供了表单验证的功能，只需要通过 rules 属性传入约定的验证规则，并将 Form-Item 的 prop 属性设置为需校验的字段名即可。</li>
</ul>
<h3 id="实现自定义规则"><strong>实现自定义规则</strong></h3>
<ul>
<li>
<p>一个箭头函数代表一个自定义规则。箭头函数有三个参数：rule,value,callback。rule代表验证规则，value代表需要验证的值，callback为回调函数。只要验证通过了，可以直接在箭头函数中调用callback回调函数，表示验证通过。如果验证失败，则需要返回一个error。</p>
</li>
<li>
<p>在data()中通过 var 定义一个变量来定义校验规则，它的值指向一个箭头函数，箭头函数中包含具体的校验规则（正则表达式），通过test方法来校验是否合法，然后在具体的规则中通过validator指定自定义校验规则，通过trigger指定触发校验的时机。</p>
<pre><code class="language-js">//验证手机号的规则
var checkMobile = (rule, value, callback) =&gt; {
    //验证手机号的正则表达式
    const regMobile = /^1[3-9][0-9]{9}$/
    if (regMobile.test(value)) {
        //合法的手机号
        return callback()
    }
    return callback(new Error('请输入合法的手机号'))
}

addFormRules: {
    mobile: [
        { required: true, message: '请输入手机号', trigger: 'blur' },
        { validator: checkMobile, trigger: 'blur' }
    ]
}
</code></pre>
</li>
</ul>
<h3 id="添加用户表单的重置功能"><strong>添加用户表单的重置功能</strong></h3>
<p>给对话框添加一个对话框关闭事件，关闭事件中对用户表单进行重置。通过<code>this.$refs</code>拿到addFormRef（表单引用），然后调用重置方法 <code>this.$refs.addFormRef.resetFields()</code>。</p>
<h3 id="实现添加用户功能"><strong>实现添加用户功能</strong></h3>
<p>点击按钮，添加新用户，首先需要进行预验证操作。通过<code>this.$refs.addFormRef</code>拿到表单引用，然后调用validate方法进行校验。函数内部提供一个箭头函数，来接受校验结果valid。</p>
<p>当预校验通过后可以发起一个添加用户的网络请求。</p>
<pre><code class="language-js">this.$refs.addFormRef.validate(async value =&gt; {
    if (!value) return
    //可以发起添加用户的网络请求
   	...
})
</code></pre>
<h3 id="实现删除用户的功能"><strong>实现删除用户的功能</strong></h3>
<p>点击删除按钮时不能立刻删除数据，因为有可能用户误操作，并不是真的想删除数据，所以此处应该有<strong>弹框提醒</strong>。此处用到弹框组件：<strong>MessageBox</strong>。</p>
<p>调用 <code>$confirm</code> 方法即可打开消息提示，它模拟了系统的  confirm 。Message Box 组件也拥有极高的定制性，我们可以传入options 作为第三个参数，它是一个字面量对象。type 表明消息类型，可以为 success，error ，info 和 warning，无效的设置将会被忽略。注意，第二个参数 title 必须定义为 String 类型，如果是 Object，会被理解为 options。在这里我们用了 Promise 来处理后续响应。通过调用<code>this.$confirm</code>来弹出消息提示框。</p>
<pre><code class="language-js">async removeUserById(id) {
    //弹框询问用户是否删除数据
    const confirmResult = await this.$confirm(
        '此操作将永久删除该用户, 是否继续?',
        '提示',
        {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
        }
    ).catch(err =&gt; err)
    //如果用户确认删除，则返回值为字符串 confirm
    //如果用户取消删除，则返回值为字符串 cancel
    if (confirmResult !== 'confirm') {
        return this.$message.info('已取消删除')
    }
   	// 删除用户...
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[主页]]></title>
        <id>https://shangxiaoyun.github.io/post/zhu-ye/</id>
        <link href="https://shangxiaoyun.github.io/post/zhu-ye/">
        </link>
        <updated>2022-07-23T07:56:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="通过接口获取菜单数据"><strong>通过接口获取菜单数据</strong></h2>
<ul>
<li>
<p>API接口文档中提到：</p>
<ul>
<li>除了登录接口，其余的接口必须要授权才能调用</li>
<li>因此，需要授权的API，必须在请求头中使用Authorization字段提供token令牌</li>
</ul>
</li>
<li>
<p>如何在每一个API的请求头中添加Authorization字段？</p>
<ul>
<li>通过axios请求拦截器添加token，保证拥有获取数据的权限。</li>
<li>请求之前会先做一个预处理，返回config（为请求头对象挂载一个属性，值为保存在sessionStorage中的token值）</li>
</ul>
</li>
</ul>
<pre><code class="language-jsx">//axios请求拦截
axios.interceptors.request.use(config =&gt; {
  //为请求头对象，添加Token 验证的Authorization字段
  console.log(config)
  config.headers.Authorization = window.sessionStorage.getItem('token')
  //在最后必须返回预处理结果
  return config
})
</code></pre>
<h2 id="发起请求获取左侧菜单数据"><strong>发起请求获取左侧菜单数据</strong></h2>
<ul>
<li>在Home页面被创建时，就应该获取菜单数据并附到左侧菜单框，因此created()生命钩子中调用this.getMenuList()</li>
<li>模板区通过指令v-for循环赋值，每个v-for循环需要一个唯一的key值，通常用id</li>
<li>el-submenu也需要唯一的一个index，否则相同的index会在一次展开时同时展开。通常也用index。注意此处index只接收字符串。</li>
<li>一级菜单的index由item.id动态绑定，key也由item.id动态绑定，不同的是，前者需要拼接‘ ’来转换成字符串。</li>
<li>二级菜单循环一级菜单的children属性，<strong>二级菜单的index由路由路径动态绑定</strong>，key仍然由item.id动态绑定。</li>
</ul>
<h2 id="实现首页的路由重定向"><strong>实现首页的路由重定向</strong></h2>
<p>只要登录成功，我们默认访问/home，但是此时我们需要重定向到welcome地址，在主体区域展示Welcome组件。首先定义一个Welcome组件，然后在home页面主体区域放置一个路由占位符。然后将welcome路由设置为home理由的子路由规则，即可在home组件嵌套显示一个welcome的子组件。</p>
<h2 id="左侧菜单改造为路由链接"><strong>左侧菜单改造为路由链接</strong></h2>
<p>点击二级菜单时，跳转到对应的页面，因此二级菜单绑定单击响应事件。</p>
<p>element-ui的NavMenu的属性中，有一项router，描述为：</p>
<p>是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转，类型为布尔值，默认为false。 :router=&quot;true&quot;表示为整个侧边栏开启路由模式。拿id作为跳转地址并不是很合适，最好是拿二级菜单的path属性作为跳转路径。</p>
<h2 id="高亮效果"><strong>高亮效果</strong></h2>
<p>NavMenu中的属性default-active说明：当前激活菜单的 index，类型为string。</p>
<p>点击链接的时候把对应的path值（index）保存到sessionStorage中<br>
当下一次刷新页面的时候，也就是home组件刚被创建的时候，就立即把值取出来，赋值给左侧菜单<br>
给二级菜单绑定一个单击响应事件: 保存链接的激活状态</p>
<pre><code class="language-jsx">saveNavState(activePath) {
	window.sessionStorage.setItem('activePath', activePath)
	this.activePath = activePath
}
</code></pre>
<pre><code class="language-jsx">created() {
    this.getMenuList()
    this.activePath = window.sessionStorage.getItem('activePath')
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[登录/退出功能]]></title>
        <id>https://shangxiaoyun.github.io/post/deng-lu-tui-chu-gong-neng/</id>
        <link href="https://shangxiaoyun.github.io/post/deng-lu-tui-chu-gong-neng/">
        </link>
        <updated>2022-07-23T07:03:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="登录业务流程">登录业务流程</h1>
<p>登录业务流程</p>
<p>1.在登录页面输入用户名和密码</p>
<p>2.调用后台接口进行验证</p>
<p>3.通过验证后，根据后台的响应状态跳转到项目主页</p>
<h1 id="登录业务的相关技术点">登录业务的相关技术点</h1>
<ul>
<li>
<p>登录业务的相关技术点</p>
<ul>
<li>http是无状态的</li>
<li>通过cookie在客户端记录状态</li>
<li>通过session在服务器端记录状态</li>
<li>通过token方式维持状态</li>
</ul>
<p><strong>如果客户端和服务器存在跨域问题：token</strong></p>
<p><strong>如果客户端和服务器不存在跨域问题：cookie+session</strong></p>
</li>
<li>
<p>登录——token原理</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://shangxiaoyun.github.io/post-images/1658562040637.png" alt="" loading="lazy"></figure>
<h2 id="登录表单">登录表单</h2>
<ul>
<li>登录表单绑定数据对象，里面的内容和输入双向绑定（:model  v-model）</li>
<li>增加表单验证规则(:rules prop)</li>
<li>表单添加ref属性，通过this.$refs拿到表单引用，调用重置和登陆验证函数(resetFields()  validate())</li>
<li>验证成功→配置axios和请求根路径，发起ajax请求  (this.$http)</li>
<li>post结果是一个promise，用async await优化</li>
</ul>
<h2 id="登录成功以后">登录成功以后</h2>
<ul>
<li>1.将登陆成功之后的token保存到客户端的sessionStoreage中
<ul>
<li>1.1 项目中除了登陆以外的其他api接口（有权限的接口） ，必须在登陆以后才能访问</li>
<li>1.2 token只应在当前网站打开期间生效，所以将token保存到<strong>sessionStoreage</strong>（会话期间存储机制，区别于localStoreage持久化的存储机制）中</li>
</ul>
</li>
</ul>
<pre><code class="language-jsx">window.sessionStorage.setItem('token', res.data.token)
</code></pre>
<ul>
<li>2. 通过<strong>编程式导航</strong>跳转到后台主页，路由地址是/home</li>
</ul>
<pre><code class="language-jsx">this.$router.push(&quot;/home&quot;);
</code></pre>
<h3 id="用路由导航守卫控制导航权限">用路由导航守卫控制导航权限</h3>
<p>如果用户没有登录，但通过url访问特定页面，需要重新导航到登录页面</p>
<pre><code class="language-jsx">//挂载路由导航守卫
router.beforeEach((to, from, next) =&gt; {
  //to 将要访问的路径
  //from 代表从哪个路径跳转而来
  //next 是一个函数，表示放行
  // next()  放行    next('/login)    强制跳转

  if (to.path === '/login') return next();
  //获取token
  const tokenStr = window.sessionStorage.getItem('token');
  if (!tokenStr) return next('/login');
  next();
})
</code></pre>
<h2 id="退出"><strong>退出</strong></h2>
<p>消除本地token</p>
<pre><code class="language-jsx">window.sessionStorage.clear()
</code></pre>
]]></content>
    </entry>
</feed>